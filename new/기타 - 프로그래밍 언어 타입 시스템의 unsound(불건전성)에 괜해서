- https://news.ycombinator.com/item?id=13050491
- https://langdev.stackexchange.com/questions/1444/what-are-the-consequences-of-an-unsound-type-system
- https://www.reddit.com/r/rust/comments/5f78za/java_and_scala_type_systems_are_unsound_because/
- https://arxiv.org/html/2408.10804v1

### AI 피셜

자바의 타입 시스템 불건전성(unsoundness)에 대해 설명해드리겠습니다.

자바의 타입 시스템이 불건전하다는 것은 정적 타입 검사를 통과했음에도 런타임에 타입 관련 오류가 발생할 수 있다는 의미입니다. 2016년에 발견된 대표적인 예시를 통해 설명드리겠습니다:

```java
class Main {
    static void unsafe(String[] s, Integer[] n) {
        s[0] = "안녕하세요";  // 배열에 String 저장
        n[0] = 1;           // 배열에 Integer 저장
    }
    
    public static void main(String[] args) {
        Integer[] nums = new Integer[1];
        Object[] objs = nums;  // Object[] <- Integer[] (합법적인 업캐스팅)
        String[] strs = (String[]) objs;  // String[] <- Object[] (런타임 오류 없이 통과)
        unsafe(strs, nums);  // 같은 배열을 다른 타입으로 전달
    }
}
```

이 코드의 문제점:
1. 컴파일러는 이 코드를 정상적으로 받아들입니다
2. 하지만 실행 시 `Integer` 배열이 `String` 배열로 취급되어 타입 안전성이 깨집니다
3. 결과적으로 한 배열에 `String`과 `Integer`가 동시에 존재할 수 있게 됩니다

이러한 불건전성이 존재하는 주요 원인:
- 자바의 배열 공변성(array covariance)
- 제네릭의 타입 소거(type erasure)
- 하위 호환성 유지를 위한 설계상의 타협

이러한 문제를 피하기 위해서는:
- 가능한 한 배열 대신 `List<T>`와 같은 제네릭 컬렉션을 사용
- 불필요한 타입 캐스팅을 피하고
- 배열의 런타임 타입을 신중하게 관리해야 합니다

추가 예외 

네, 2016년에 발견된 또 다른 자바 타입 시스템 불건전성 예시들을 보여드리겠습니다:

1. 제네릭 배열 생성 우회 문제:
```java
class Pair<T> {
    T value;
    
    public void set(T value) { 
        this.value = value;
    }
    
    public T get() { 
        return value; 
    }
}

class Main {
    public static void main(String[] args) {
        Pair<String>[] stringPairs = (Pair<String>[]) new Pair<?>[1]; // 런타임에는 raw type
        Object[] objects = stringPairs;
        objects[0] = new Pair<Integer>();  // 런타임에서 체크되지 않음
        String s = stringPairs[0].get();    // ClassCastException
    }
}
```

2. 와일드카드 캡처 문제:
```java
class Evil {
    static <T> T[] toArray(T... args) {
        return args;
    }
    
    public static void main(String[] args) {
        String[] strings = toArray("hello", "world");
        Object[] objects = strings;
        objects[0] = 1;  // ArrayStoreException이 발생해야 하지만...
        String s = strings[0];  // 여기서 ClassCastException
    }
}
```

3. 제네릭과 메소드 오버로딩 문제:
```java
class Container<T> {
    T[] array;
    
    @SuppressWarnings("unchecked")
    Container(int size) {
        array = (T[]) new Object[size];
    }
    
    void set(int index, T value) {
        array[index] = value;
    }
    
    <U> void strange(Container<U> other) {
        Object[] temp = this.array;
        other.array = (U[]) temp;  // 런타임에서 체크되지 않음
    }
}

class Test {
    public static void main(String[] args) {
        Container<String> strings = new Container<>(1);
        Container<Integer> ints = new Container<>(1);
        strings.strange(ints);  // 타입 안전성 깨짐
        ints.set(0, 42);
        String s = strings.array[0];  // ClassCastException
    }
}
```

이러한 예시들의 공통점은:
1. 컴파일러가 타입 체크를 통과시킵니다
2. 제네릭의 타입 소거로 인해 런타임에서 제대로 된 타입 체크가 이루어지지 않습니다
3. 결과적으로 예상치 못한 ClassCastException이 발생할 수 있습니다

이런 문제들은 자바의 하위 호환성 유지와 제네릭의 타입 소거 구현 방식 때문에 발생하며, 완전히 해결하기는 어렵습니다. 이것이 Kotlin이나 Scala와 같은 현대 JVM 언어들이 더 엄격한 타입 시스템을 도입한 이유 중 하나입니다.

### 추가

#### 다른 JVM 언어는?

그러나 Kotlin이나 Scala에서도 여전히 발생 가능하다.

#### 왜 해결하지 않는가?

이런 문제가 중요하게 다루어지고 있지는 않는다. 
일반적으로 거의 발생하지 않기 때문인 것으로 보인다.
최근 언어에서는 안전하지 않은 캐스팅을 할 때나 리플랙션 등을 사용할 때만 발생하기 때문이다.

#### 다른 언어는? - AI 피셜

Rust:

Rust는 매우 엄격한 타입 시스템을 가지고 있습니다
컴파일 시점에 모든 타입 관련 문제를 잡아냅니다
소유권(ownership) 시스템과 결합되어 메모리 안전성까지 보장합니다
실질적으로 건전한(sound) 타입 시스템을 가진 언어입니다

(Rust의 경우 unsafe 코드에서는 발생할 수 있다.)

C:

C는 매우 약한 타입 시스템을 가지고 있습니다
명시적 타입 캐스팅(void* 등)을 자유롭게 할 수 있어 타입 안전성이 매우 낮습니다
포인터 연산과 캐스팅으로 인해 타입 시스템을 쉽게 우회할 수 있습니다
프로그래머가 타입 안전성을 직접 책임져야 합니다

#### RTTI 지원 여부에 따른 동작 차이

https://langdev.stackexchange.com/a/1447 << 여기서 참고

이 설명은 타입 시스템의 건전성(soundness)에 대한 중요한 개념을 설명하고 있으며, 사실입니다. 핵심 내용을 풀어서 설명해드리겠습니다:

타입 시스템 건전성의 정의:
- 만약 표현식 x가 컴파일 시점에 타입 T를 가진다고 판단되면
- 실행 시점에서도 항상 타입 T의 값을 가져야 함
- 이를 어기면 "unsound"한 타입 시스템

언어들은 두 가지 카테고리로 나뉩니다:

1. 런타임 타입 정보(RTTI)가 없거나 사용하지 않는 언어들:
```rust
// Rust 예시
unsafe {
    let x: &str = std::mem::transmute(42u32);
    // 매우 위험! - 메모리 안전성이 깨질 수 있음
}
```

2. 런타임 타입 체크를 하는 언어들:
```java
// Java 예시
Object[] arr = new String[1];
arr[0] = 42; // 런타임에 ArrayStoreException 발생
```

중요한 차이점:
- 첫 번째 그룹(Rust, C++)은 타입 오류가 메모리 안전성 문제로 이어질 수 있음
- 두 번째 그룹(Java, TypeScript)은 타입 오류가 런타임 예외나 동적 디스패치로 처리됨

이것이 중요한 이유:
1. 메모리 안전성이 중요한 언어들은 완벽한 타입 건전성을 목표로 함
2. 런타임 체크를 하는 언어들은 약간의 불건전성을 허용하면서 유연성을 제공할 수 있음
3. 이는 점진적 타이핑(gradual typing)이라는 개념으로 이어짐

실제로 이러한 차이는 언어 설계와 사용에 큰 영향을 미칩니다.

---

RTTI (Runtime Type Information)는 프로그램 실행 중에 객체의 타입 정보를 확인할 수 있게 해주는 메커니즘입니다.

RTTI가 없는 경우의 위험성을 예시로 설명하겠습니다:

```c++
// C++ 예시
class Animal { };
class Dog : public Animal { 
    void bark() { /* ... */ }
};

Animal* a = new Animal();
Dog* d = (Dog*)a;  // 컴파일러는 경고하지만, 실행됨
d->bark();         // 💥 메모리 손상/충돌 발생!
```

이 코드가 위험한 이유:
1. 실제로는 `Animal` 객체인데 `Dog`처럼 취급
2. `Dog`의 메서드를 호출하려고 하지만, 실제 객체에는 그런 메서드가 없음
3. 잘못된 메모리 위치를 접근하게 되어 프로그램이 충돌하거나 더 심각한 문제 발생

반면 RTTI가 있는 Java의 경우:
```java
Animal a = new Animal();
Dog d = (Dog)a;  // ClassCastException 발생
// 프로그램은 안전하게 중단됨
```

즉:
- RTTI가 없으면 → 잘못된 메모리 접근으로 인한 치명적 오류
- RTTI가 있으면 → 안전한 예외 처리로 프로그램 보호

이것이 Rust가 `unsafe` 키워드를 매우 제한적으로만 허용하고, C++에서 `dynamic_cast`의 사용을 권장하는 이유입니다.